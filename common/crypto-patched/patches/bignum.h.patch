--- orig/rsa-orig/polarssl-0.10.0/include/polarssl/bignum.h	2009-01-04 08:27:10.000000000 -0800
+++ patched/bignum.h	2012-09-25 11:14:58.000000000 -0700
@@ -22,7 +22,7 @@
 #ifndef POLARSSL_BIGNUM_H
 #define POLARSSL_BIGNUM_H
 
-#include <stdio.h>
+#include "RandomSupply.h"
 
 #define POLARSSL_ERR_MPI_FILE_IO_ERROR                     -0x0002
 #define POLARSSL_ERR_MPI_BAD_INPUT_DATA                    -0x0004
@@ -140,6 +140,7 @@
  */
 int mpi_read_string( mpi *X, int radix, char *s );
 
+#if 0
 /**
  * \brief          Export into an ASCII string
  *
@@ -179,6 +180,7 @@
  * \note           Set fout == NULL to print X on the console.
  */
 int mpi_write_file( char *p, mpi *X, int radix, FILE *fout );
+#endif
 
 /**
  * \brief          Import X from unsigned binary data, big endian
@@ -200,7 +202,7 @@
  * \param buflen   output buffer size
  *
  * \return         0 if successful,
- *                 POLARSSL_ERR_MPI_BUFFER_TOO_SMALL if buf isn't large enough
+ *                 minimum required buffer size if buf isn't large enough
  *
  * \note           Call this function with *buflen = 0 to obtain the
  *                 minimum required buffer size in *buflen.
@@ -392,7 +394,7 @@
  *                 1 if memory allocation failed,
  *                 POLARSSL_ERR_MPI_NOT_ACCEPTABLE if X is not prime
  */
-int mpi_is_prime( mpi *X, int (*f_rng)(void *), void *p_rng );
+int mpi_is_prime( mpi *X, RandomSupply* random_supply );
 
 /**
  * \brief          Prime number generation
@@ -400,15 +402,14 @@
  * \param X        destination mpi
  * \param nbits    required size of X in bits
  * \param dh_flag  if 1, then (X-1)/2 will be prime too
- * \param f_rng    RNG function
- * \param p_rng    RNG parameter
+ * \param random_supply Pool of good randomness
  *
  * \return         0 if successful (probably prime),
  *                 1 if memory allocation failed,
  *                 POLARSSL_ERR_MPI_BAD_INPUT_DATA if nbits is < 3
  */
 int mpi_gen_prime( mpi *X, int nbits, int dh_flag,
-                   int (*f_rng)(void *), void *p_rng );
+                   RandomSupply* random_supply );
 
 /**
  * \brief          Checkup routine
